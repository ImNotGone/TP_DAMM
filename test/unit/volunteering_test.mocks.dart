// Mocks generated by Mockito 5.4.4 from annotations
// in ser_manos_mobile/test/unit/volunteering_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ser_manos_mobile/volunteer/data/volunteering_repository.dart'
    as _i2;
import 'package:ser_manos_mobile/volunteer/domain/volunteering.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [VolunteeringRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVolunteeringRepository extends _i1.Mock
    implements _i2.VolunteeringRepository {
  MockVolunteeringRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<Map<String, _i4.Volunteering>> fetchVolunteerings() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchVolunteerings,
          [],
        ),
        returnValue: _i3.Stream<Map<String, _i4.Volunteering>>.empty(),
      ) as _i3.Stream<Map<String, _i4.Volunteering>>);

  @override
  _i3.Future<_i4.Volunteering?> volunteerToVolunteering(
    String? volunteeringId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #volunteerToVolunteering,
          [
            volunteeringId,
            userId,
          ],
        ),
        returnValue: _i3.Future<_i4.Volunteering?>.value(),
      ) as _i3.Future<_i4.Volunteering?>);

  @override
  _i3.Future<_i4.Volunteering?> unvolunteerToVolunteering(
    String? volunteeringId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unvolunteerToVolunteering,
          [
            volunteeringId,
            userId,
          ],
        ),
        returnValue: _i3.Future<_i4.Volunteering?>.value(),
      ) as _i3.Future<_i4.Volunteering?>);
}
